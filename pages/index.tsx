import axios from 'axios';
import Head from 'next/head';
import { Video } from '../types';
import VideoItem from '../components/VideoItem';
import { MouseEvent, useEffect, useState } from 'react';

interface Props {
  videos: Video[];
}

export default function Home({ videos }: Props) {
  const [isMute, setIsMute] = useState(true);

  const handleMute = (e: MouseEvent) => {
    e.stopPropagation();
    setIsMute((prev) => !prev);
  };

  useEffect(() => {
    const videoElems = document.querySelectorAll('.video');

    videoElems.forEach((elem) => {
      const video = elem as HTMLVideoElement;

      isMute ? (video.muted = true) : (video.muted = false);
    });
  }, [isMute]);

  useEffect(() => {
    const videoElems = document.querySelectorAll('.video');

    const observer = new IntersectionObserver(
      (entries) => {
        console.log(entries);

        entries.forEach((entry) => {
          const videoTag = entry.target as HTMLVideoElement;

          if (entry.isIntersecting) {
            videoTag.play();
          } else {
            videoTag.pause();
            videoTag.currentTime = 0;
          }
        });
      },
      { threshold: 0.5 }
    );

    videoElems.forEach((video) => observer.observe(video));

    return () => videoElems.forEach((video) => observer.unobserve(video));
  }, []);

  return (
    <>
      <Head>
        <title>TikTok</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <div className='h-[calc(100vh-96px)] overflow-hidden overflow-y-auto pt-2'>
        {videos?.map((video) => (
          <VideoItem
            key={video._id}
            video={video}
            isMute={isMute}
            handleMute={handleMute}
          />
        ))}
      </div>
    </>
  );
}

export async function getServerSideProps() {
  const { data: videos } = await axios.get('http://localhost:3000/api/post');

  return { props: { videos } };
}
